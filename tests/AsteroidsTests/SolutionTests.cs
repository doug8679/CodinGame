using Asteroids;

using NUnit.Framework;

using System;
using System.IO;
using System.Text;

namespace AsteroidsTests
{
    public class SolutionTests
    {
        StringBuilder builder;
        TextReader _oldIn;
        TextWriter _oldOut;

        [SetUp]
        public void Setup()
        {
            builder = new StringBuilder();
            _oldIn = Console.In;
            _oldOut = Console.Out;
        }

        [TearDown]
        public void TearDown()
        {
            Console.SetIn(_oldIn);
        }

        [Test]
        public void HorizontalMotion()
        {
            // Arrange
            var input = @"5 5 1 2 3
A.... .A...
..... .....
..... .....
..... .....
..... .....";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@"..A..
.....
.....
.....
.....
", answer);
        }

        [Test]
        public void VerticalMotion()
        {
            // Arrange
            var input = @"5 5 1 2 3
A.... .....
..... A....
..... .....
..... .....
..... .....";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@".....
.....
A....
.....
.....
", answer);
        }

        [Test]
        public void CombinedMotion()
        {
            // Arrange
            var input = @"5 5 1 2 3
A.... .....
..... .A...
..... .....
..... .....
..... .....";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@".....
.....
..A..
.....
.....
", answer);
        }

        [Test]
        public void NegativeMotion()
        {
            // Arrange
            var input = @"5 5 1 2 3
..... .....
..... .A...
..A.. .....
..... .....
..... .....";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@"A....
.....
.....
.....
.....
", answer);
        }

        [Test]
        public void GreaterDelta()
        {
            // Arrange
            var input = @"6 6 1 5 6
A..... ....A.
...... ......
...... ......
...... ......
...... ......
...... ......";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@".....A
......
......
......
......
......
", answer);
        }

        [Test]
        public void MultipleAsteroids()
        {
            // Arrange
            var input = @"6 6 1 3 5
A..... .A....
...... B.....
B..... ......
...... ......
...... ......
...... ......";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@"B.A...
......
......
......
......
......
", answer);
        }

        [Test]
        public void Depth()
        {
            // Arrange
            var input = @"6 6 1 6 11
..H... ......
...... ..H...
E...G. .E.G..
...... ..F...
..F... ......
...... ......";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@"......
......
..E...
......
......
......
", answer);
        }

        [Test]
        public void NoMotion()
        {
            // Arrange
            var input = @"5 5 0 1255 9999
..... .....
.A... .A...
..... .....
...D. ...D.
..... .....";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@".....
.A...
.....
...D.
.....
", answer);
        }

        [Test]
        public void OutOfBounds()
        {
            // Arrange
            var input = @"10 10 100 200 300
A......... .A........
B......... ..B.......
C......... ...C......
D......... ....D.....
E......... .....E....
.........F ........F.
.........G .......G..
.........H ......H...
.........I .....I....
.........J ....J.....";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@"..A.......
....B.....
......C...
........D.
..........
.......F..
.....G....
...H......
.I........
..........
", answer);
        }

        [Test]
        public void Armageddon()
        {
            // Arrange
            var input = @"20 20 25 75 100
.................O.. G...................
.....N...........U.. ...............W....
.............L.R.... ...................C
.................... ...E................
..........Z..V.H.... ..............K.....
................X... ...........T........
.............P...... ............A.......
.............A...... .....P...FLI......N.
.Q.............T.... ....................
..................F. ........D...........
.................... ......S..Y.........M
......K............W .........B....Z.....
...............Y.... ....................
..............S..... ....V.............J.
...........JE......D .........O..........
...M................ ..X...........U.....
......B..G...C....I. ....................
.................... ....................
.................... ..Q................R
.................... .......H............";
            Console.SetIn(new StringReader(input));
            Console.SetOut(new StringWriter(builder));

            // Act
            Solution.Main(new string[0]);
            Console.SetOut(_oldOut);

            var answer = builder.ToString();
            Assert.AreEqual(@"..................K.
....................
.......I............
.........T..........
....................
...........A........
..D.F...............
.P..................
..S.......B.........
......Y.L...........
....................
....................
....................
....................
................Z...
....................
....................
....................
....................
....................
", answer);
        }
    }
}